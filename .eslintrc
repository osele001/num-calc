{
    "extends": ["eslint:recommended", "plugin:react/recommended"],
    "env": {
        "browser": true,
        "node": true,
        "es6": true,
        "jest": true,
        "jquery": true
    },
    "parser": "babel-eslint",
    "parserOptions": {
        "ecmaVersion": 6,
        "sourceType": "module",
        "ecmaFeatures": {
            "jsx": true
        }
    },
    "globals": {
        "console": true,
        "easy": true,
        "frosmo": true,
        "jQuery": true
    },
    "pluginc": [
        "react",
        "babel"
    ],
    // Contains rules that are not set by eslint:recommended
    // Idea based on rules from https://github.com/airbnb/javascript
    "rules": {
        // "allow" (0), "warn" (1), "error" (2)

        // BEST PRACTICES

        // treat var statements as if they were block scoped
        "block-scoped-var": 1,

        "consistent-return": 0,

        // specify curly brace conventions for all control statements
        "curly": 2,

        // require default case in switch statements
        // "default-case": 1,

        // encourages use of dot notation whenever possible
        "dot-notation": [2, { "allowKeywords": true }],

        // enforces consistent newlines before or after dots
        // http://eslint.org/docs/rules/dot-location
        "dot-location": [2, "property"],

        // require the use of === and !==
        "eqeqeq": 1,

        // make sure for-in loops have an if statement
        "guard-for-in": 2,

        // disallow the use of alert, confirm, and prompt
        "no-alert": 2,

        // disallow division operators explicitly at beginning of regular expression
        "no-div-regex": 2,

        // disallow else after a return in an if
        "no-else-return": 2,

        // disallow comparisons to null without a type-checking operator
        "no-eq-null": 2,

        // disallow use of eval()
        "no-eval": 2,

        // disallow adding to native types
        "no-extend-native": 2,

        // disallow unnecessary function binding
        "no-extra-bind": 2,

        // disallow fallthrough of case statements
        "no-fallthrough": 2,

        // disallow the use of leading or trailing decimal points in numeric literals
        "no-floating-decimal": 2,

        // disallow implicit type conversions
        "no-implicit-coercion": [0, {
          "boolean": false,
          "number": true,
          "string": true,
          "allow": []
        }],

        // disallow use of multiple spaces
        "no-multi-spaces": 2,

        // disallow use of multiline strings
        "no-multi-str": 1,

         // disallow use of new operator for Function object
        "no-new-func": 2,

        // disallows creating new instances of String, Number, and Boolean
        "no-new-wrappers": 2,

        // disallow use of (old style) octal literals
        "no-octal": 2,

        // disallow reassignment of function parameters
        // "no-param-reassign": [2, { props: true }],

        // disallow declaring the same variable more then once
        "no-redeclare": 2,

        // disallow self assignment
        "no-self-assign": 2,

        // disallow comparisons where both sides are exactly the same
        "no-self-compare": 2,

        // disallow use of comma operator
        "no-sequences": 2,

        // restrict what can be thrown as an exception
        "no-throw-literal": 2,

        // disallow unmodified conditions of loops
        "no-unmodified-loop-condition": 2,

        // disallow usage of expressions in statement position
        "no-unused-expressions": 1,

        // disallow unnecessary .call() and .apply()
        "no-useless-call": 2,

        // disallow useless string concatenation
        "no-useless-concat": 2,

        // disallow unnecessary string escaping
        // "no-useless-escape": 2,

        // disallow use of void operator
        "no-void": 2,

        // disallow use of the with statement
        "no-with": 2,

        // require use of the second argument for parseInt()
        "radix": 0,

        // require immediate function invocation to be wrapped in parentheses
        "wrap-iife": [2, "any"],

        // require or disallow Yoda conditions
        "yoda": 2,

        // ERRORS

        // disallow assignment in conditional expressions
        "no-cond-assign": [2, "except-parens"],

        // disallow use of console
        "no-console": 2,

        // disallow use of constant expressions in conditions
        "no-constant-condition": 2,

        // disallow control characters in regular expressions
        "no-control-regex": 2,

        // disallow use of debugger
        "no-debugger": 2,

        // disallow duplicate arguments in functions
        "no-dupe-args": 2,

        // disallow duplicate keys when creating object literals
        "no-dupe-keys": 2,

        // disallow a duplicate case label.
        "no-duplicate-case": 2,

        // disallow empty statements
        "no-empty": 2,

        // disallow the use of empty character classes in regular expressions
        "no-empty-character-class": 2,

        // disallow assigning to the exception in a catch block
        "no-ex-assign": 2,

        // disallow double-negation boolean casts in a boolean context
        // http://eslint.org/docs/rules/no-extra-boolean-cast
        "no-extra-boolean-cast": 2,

        // disallow unnecessary parentheses
        // http://eslint.org/docs/rules/no-extra-parens
        "no-extra-parens": [0, "all", {
          "conditionalAssign": true,
          "nestedBinaryExpressions": false,
          "returnAssign": false
        }],

        // disallow unnecessary semicolons
        "no-extra-semi": 2,

        // disallow overwriting functions written as function declarations
        "no-func-assign": 2,

        // disallow function or variable declarations in nested blocks
        "no-inner-declarations": 2,

        // disallow invalid regular expression strings in the RegExp constructor
        "no-invalid-regexp": 2,

        // disallow irregular whitespace outside of strings and comments
        "no-irregular-whitespace": 2,

        // disallow negation of the left operand of an in expression
        "no-negated-in-lhs": 2,

        // disallow the use of object properties of the global object (Math and JSON) as functions
        "no-obj-calls": 2,

        // disallow multiple spaces in a regular expression literal
        "no-regex-spaces": 2,

        // disallow sparse arrays
        "no-sparse-arrays": 2,

        // avoid code that looks like two expressions but is actually one
        "no-unexpected-multiline": 2,

        // disallow unreachable statements after a return, throw, continue, or break statement
        "no-unreachable": 2,

        // disallow return/throw/break/continue inside finally blocks
        "no-unsafe-finally": 2,

        // disallow comparisons with the value NaN
        "use-isnan": 2,

        // ensure that the results of typeof are compared against a valid string
        "valid-typeof": 2,

        // STYLE

        // enforce spacing inside array brackets
        "array-bracket-spacing": [2, "never"],

        // enforce one true brace style
        "brace-style": 1,

        // enforce one true comma style
        "comma-style": [1, "last"],

        // enforces consistent naming when capturing the current execution context
        "consistent-this": ["error", "self"],

        // enforces use of function declarations or expressions
        "func-style": [2, "declaration"],

        // this option sets a specific tab width for your code
        "indent": [1, 4, {"SwitchCase": 1}],

        // enforces spacing between keys and values in object literal properties
        "key-spacing": [1, { "beforeColon": false, "afterColon": true }],

        // require a space before & after certain keywords
        "keyword-spacing": [1, {"before": true, "after": true}],

        // disallow use of the Array constructor
        "no-array-constructor": 2,

        // disallow use of bitwise operators
        "no-bitwise": 1,

        // disallow use of the Object constructor
        "no-new-object": 2,

        // disallow trailing whitespace at the end of lines
        "no-trailing-spaces": 2,

        // disallow whitespace before properties
        "no-whitespace-before-property": 1,

        // require padding inside curly braces
        "object-curly-spacing": [2, "always"],

        // enforce "same line" or "multiple line" on object properties
        "object-property-newline": 1,

        // allow just one var statement per function
        "one-var": [0, "never"],

        // enforce padding within blocks
        // "padded-blocks": [1, "never"],

        // require quotes around object literal property names
        "quote-props": [2, "as-needed", { "keywords": false, "unnecessary": true, "numbers": false }],

        // enforce one true quote style
        "quotes": [1, "single"],

        // do not require jsdoc
        // "require-jsdoc": 0,

        // disallow unnecessary semicolons
        "semi": [2, "always"],

        // enforce spacing before and after semicolons
        "semi-spacing": [1, {"before": false, "after": true}],

        // require or disallow space before blocks
        "space-before-blocks": [2, "always"],

        // require or disallow space before function opening parenthesis
        "space-before-function-paren": [0, { "anonymous": "always", "named": "never" }],

        // require or disallow spaces inside parentheses
        "space-in-parens": [1, "never"],

        // require spaces around operators
        "space-infix-ops": 2,

        // require or disallow spaces before/after unary operators
        "space-unary-ops": 1,

        // require or disallow a space immediately following the // or /* in a comment
        // "spaced-comment": [2, "always", {
        //  exceptions: ["-", "+"],

        // space here to support sprockets directives
        //  markers: ["=", "!"]
        // }],

        // disallow the use of undeclared variables unless mentioned in /*global */ comments
        "no-undef": 0
    }
}
